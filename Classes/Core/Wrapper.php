<?php

/**
 * Class Tx_Smarty_Core_Wrapper
 * @SuppressWarnings(PHPMD.ExcessiveClassComplexity)
 */
class Tx_Smarty_Core_Wrapper extends SmartyBC
{
    /**
     * @var Tx_Smarty_Core_Configuration
     */
    private $configuration;

    /**
     * Language file(s) for the translate view helper
     *
     * @var string|array
     */
    private $languageFile;

    /**
     * @var boolean
     */
    private $muteErrors = false;

    /**
     * @var boolean
     */
    private $respectNoCache = false;

    /**
     * @var
     */
    const CACHING_LIFETIME_TYPO3 = 1;

    /**
     * Gets the instance of the configuration manager
     *
     * @return Tx_Smarty_Core_Configuration
     */
    public function getConfiguration()
    {
        if (is_null($this->configuration)) {
            $this->configuration = Tx_Smarty_Service_Compatibility::makeInstance('Tx_Smarty_Core_Configuration', $this);
        }

        return $this->configuration;
    }


    /************************************************************************
     * Peg smarty's cache setting to TSFE->no_cache
     ************************************************************************/

    /**
     * @param $respectNoCache
     */
    public function setRespectNoCache($respectNoCache = false)
    {
        $this->respectNoCache = (boolean) $respectNoCache;
    }

    /**
     * @return bool
     */
    public function hasRespectNoCache()
    {
        return $this->respectNoCache;
    }

    /**
     * @param $value
     * @SuppressWarnings(PHPMD.CamelCaseVariableName)
     */
    public function setCacheLifetime($value)
    {
        if ($value === self::CACHING_LIFETIME_TYPO3) {
            if (Tx_Smarty_Utility_Typo3::isFeInstance()) {
                $this->cache_lifetime = $GLOBALS['TSFE']->config['config']['cache_period'];

            } else {
                // Defaults to 60 * 60 * 24, which is 24 hours.
                $this->cache_lifetime = 60 * 60 * 24;
            }

        } else {
            $this->cache_lifetime = intval($value);
        }
    }


    /************************************************************************
     * Mutes expected warnings and notices deliberately generated by Smarty
     ************************************************************************/

    /**
     * Mute/unmute errors
     *
     * @see http://www.smarty.net/docs/en/api.mute.expected.errors.tpl
     * @param $muteErrors
     */
    public function setMuteErrors($muteErrors = false)
    {
        $this->muteErrors = (boolean) $muteErrors;

        if ($this->muteErrors) {
            $this->muteExpectedErrors();

        } else {
            $this->unmuteExpectedErrors();
        }
    }

    /**
     * Get Mute errors setting
     *
     * @return array|bool
     */
    public function getMuteErrors()
    {
        return $this->muteErrors;
    }


    /************************************************************************
     * Resolves and sets/gets language file property
     ************************************************************************/

    /**
     * Sets language file(s)
     *
     * @param $languageFile
     */
    public function setLanguageFile($languageFile)
    {
        $this->addLanguageFile($languageFile);
    }

    /**
     * Gets language file(s)
     *
     * @param null $index
     * @return array|null
     */
    public function getLanguageFile($index = null)
    {
        if ($index !== null) {
            return isset($this->languageFile[$index]) ? $this->languageFile[$index] : null;
        }

        return (array) $this->languageFile;
    }

    /**
     * Adds language file(s)
     *
     * @param $languageFile
     * @param null $key
     * @return Tx_Smarty_Core_Wrapper
     */
    public function addLanguageFile($languageFile, $key = null)
    {
        // make sure we're dealing with an array
        $this->languageFile = (array) $this->languageFile;

        if (is_array($languageFile)) {
            foreach ($languageFile as $k => $v) {
                if (is_int($k)) {
                    // indexes are not merged but appended
                    $this->languageFile[] = $v;

                } else {
                    // string indexes are overridden
                    $this->languageFile[$k] = $v;
                }
            }
        } elseif (!is_null($key)) {
            $this->languageFile[$key] = $languageFile;

        } else {
            $this->languageFile[] = $languageFile;
        }

        $this->languageFile = array_unique($this->languageFile);

        return $this;
    }


    /************************************************************************
     * Resolve directories/paths in "dir" properties
     ************************************************************************/

    /**
     * Set template directory
     *
     * @param array|string $templateDir
     * @return Smarty
     */
    public function setTemplateDir($templateDir)
    {
        $templateDir = Tx_Smarty_Utility_Path::resolvePaths($templateDir);
        return parent::setTemplateDir($templateDir);
    }

    /**
     * Add template directory(s)
     *
     * @param array|string $templateDir
     * @param null $key
     * @return Smarty
     */
    public function addTemplateDir($templateDir, $key = null)
    {
        $templateDir = Tx_Smarty_Utility_Path::resolvePaths($templateDir);
        return parent::addTemplateDir($templateDir, $key);
    }

    /**
     * Set config directory
     *
     * @param $configDir
     * @return Smarty
     */
    public function setConfigDir($configDir)
    {
        $configDir = Tx_Smarty_Utility_Path::resolvePaths($configDir);
        return parent::setConfigDir($configDir);
    }

    /**
     * Add config directory(s)
     *
     * @param array|string $configDir
     * @param null $key
     * @return Smarty
     */
    public function addConfigDir($configDir, $key = null)
    {
        $configDir = Tx_Smarty_Utility_Path::resolvePaths($configDir);
        return parent::addConfigDir($configDir, $key);
    }

    /**
     * Set plugins directory
     *
     * @param array|string $pluginsDir
     * @return Smarty
     */
    public function setPluginsDir($pluginsDir)
    {
        $pluginsDir = Tx_Smarty_Utility_Path::resolvePaths($pluginsDir);
        // Never overwrite plugins_dir! Always translate the plugins_dir setter to an adder.
        return parent::addPluginsDir($pluginsDir);
    }

    /**
     * @param $pluginsDir
     * @return Smarty
     */
    public function addPluginsDir($pluginsDir)
    {
        $pluginsDir = Tx_Smarty_Utility_Path::resolvePaths($pluginsDir);
        return parent::addPluginsDir($pluginsDir);
    }

    /**
     * Set compile directory
     *
     * @param string $compileDir
     * @return Smarty
     */
    public function setCompileDir($compileDir)
    {
        $compileDir = Tx_Smarty_Utility_Path::resolvePaths($compileDir);
        return parent::setCompileDir($compileDir);
    }

    /**
     * Set cache directory
     *
     * @param string $cacheDir
     * @return Smarty
     */
    public function setCacheDir($cacheDir)
    {
        $cacheDir = Tx_Smarty_Utility_Path::resolvePaths($cacheDir);
        return parent::setCacheDir($cacheDir);
    }

    /**
     * Set the debug template
     *
     * @param string $tplName
     * @return Smarty
     */
    public function setDebugTemplate($tplName)
    {
        $tplName = Tx_Smarty_Utility_Path::resolvePaths($tplName);
        return parent::setDebugTemplate($tplName);
    }


    /************************************************************************
     * Modified display
     ************************************************************************/

    /**
     * returns a rendered Smarty template: Modifies the display method to fetch the rendered
     * template instead of displaying it.
     *
     * @param string $template   the resource handle of the template file or template object
     * @param mixed  $cacheId   cache id to be used with this template
     * @param mixed  $compileId compile id to be used with this template
     * @param object $parent     next higher level of Smarty variables
     * @return string|void       rendered template
     * @SuppressWarnings(PHPMD.CamelCaseVariableName)
     */
    public function display($template = null, $cacheId = null, $compileId = null, $parent = null)
    {
        // set error reporting to the value defined in typo3
        $this->error_reporting = $GLOBALS['TYPO3_CONF_VARS']['SYS']['errorHandlerErrors'];

        // Disables caching if it is globally disabled or has been pegged to TSFE->no_cache
        if (($this->respectNoCache === true && isset($GLOBALS['TSFE']->no_cache) && $GLOBALS['TSFE']->no_cache)
            || (boolean) Tx_Smarty_Utility_ExtConf::getExtConfValue('disable_caching')) {

            $this->set('caching', false);
        }

        return $this->fetch($template, $cacheId, $compileId, $parent, false);
    }

    /**
     * Alias for display
     *
     * @param null $template
     * @param null $cacheId
     * @param null $compileId
     * @param null $parent
     * @return string|void
     */
    public function render($template = null, $cacheId = null, $compileId = null, $parent = null)
    {
        return $this->display($template, $cacheId, $compileId, $parent);
    }


    /************************************************************************
     * Accessors
     ************************************************************************/

    /**
     * @param $property
     * @return mixed
     */
    final public function get($property)
    {
        return call_user_func(array($this->getConfiguration(), 'get'), $property);
    }

    /**
     * @param string $property
     * @return array|mixed|null|string
     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
     */
    public function __get($property)
    {
        if ($property === 'template_dir' ||
            $property === 'path_to_template_directory') {

            return $this->getTemplateDir();

        } elseif ($property === 'plugins_dir') {
            return $this->getPluginsDir();

        } elseif ($property === 'config_dir') {
            return $this->getConfigDir();

        } elseif ($property === 'compile_dir') {
            return $this->getCompileDir();

        } elseif ($property === 'cache_dir') {
            return $this->getCacheDir();

        } elseif ($property === 't3_languageFile' ||
            $property === 'path_to_language_file' ||
            $property === 'relPathToLanguageFile' ||
            $property === 'language_file') {

            return $this->getLanguageFile($property);

        } elseif ($property === 'respect_no_cache') {
            return $this->hasRespectNoCache();

        } elseif ($property === 't3_extVars' ||
            $property === 'pObj' ||
            $property === 'cObj' ||
            $property === 't3_confVars' ||
            $property === 't3_smartyVars' ||
            $property === 't3_conf' ||
            $property === '_debug_resource') {

            Tx_Smarty_Service_Compatibility::logDeprecatedFunction();
            return null;

        } else {
            return $this->get($property);
        }
    }

    /**
     * @param $property
     * @param $value
     * @return mixed
     */
    final public function add($property, $value)
    {
        return call_user_func(array($this->getConfiguration(), 'add'), $property, $value);
    }

    /**
     * @param $property
     * @param $value
     * @return mixed
     */
    final public function set($property, $value)
    {
        return call_user_func(array($this->getConfiguration(), 'set'), $property, $value);
    }

    /**
     * Generic setter for properties which are either deprecated or not accessible (i.e. private and therefore have
     * to be translated to the appropriate setter method).
     *
     * @param string $property
     * @param mixed $value
     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
     */
    public function __set($property, $value)
    {
        if ($property === 'template_dir' ||
            $property === 'path_to_template_directory') {

            $this->setTemplateDir($value);

        } elseif ($property === 'plugins_dir') {
            $this->addPluginsDir($value);

        } elseif ($property === 'config_dir') {
            $this->setConfigDir($value);

        } elseif ($property === 'compile_dir') {
            $this->setCompileDir($value);

        } elseif ($property === 'cache_dir') {
            $this->setCacheDir($value);

        } elseif ($property === 't3_languageFile' ||
            $property === 'path_to_language_file' ||
            $property === 'relPathToLanguageFile' ||
            $property === 'language_file') {

            $this->setLanguageFile($value);

        } elseif ($property === 'respect_no_cache') {
            $this->setRespectNoCache($value);

        } elseif ($property === 't3_extVars' ||
            $property === 'pObj' ||
            $property === 'cObj' ||
            $property === 't3_confVars' ||
            $property === 't3_smartyVars' ||
            $property === 't3_conf' ||
            $property === '_debug_resource') {

            Tx_Smarty_Service_Compatibility::logDeprecatedFunction();

        } else {
            $this->set($property, $value);
        }
    }


    /************************************************************************
     * Deprecated methods
     ************************************************************************/

    /**
     * Sets the template directory
     *
     * @param $pathToTemplateDirectory
     * @deprecated Use setTemplateDir() instead
     */
    public function setPathToTemplateDirectory($pathToTemplateDirectory)
    {
        Tx_Smarty_Service_Compatibility::logDeprecatedFunction();
        $this->setTemplateDir($pathToTemplateDirectory);
    }

    /**
     * Gets the template directory
     *
     * @return array|null
     * @deprecated Use setTemplateDir() instead
     */
    public function getPathToTemplateDirectory()
    {
        Tx_Smarty_Service_Compatibility::logDeprecatedFunction();
        return $this->getTemplateDir();
    }

    /**
     * Set the language file
     *
     * @param $pathToLanguageFile
     * @deprecated use setLanguageFile() instead
     */
    public function setRelPathToLanguageFile($pathToLanguageFile)
    {
        Tx_Smarty_Service_Compatibility::logDeprecatedFunction();
        $this->setLanguageFile($pathToLanguageFile);
    }

    /**
     * Get the language file(s)
     *
     * @return array|null
     * @deprecated use getLanguageFile() instead
     */
    public function getRelPathToLanguageFile()
    {
        Tx_Smarty_Service_Compatibility::logDeprecatedFunction();
        return $this->getLanguageFile();
    }

    /**
     * Set the language file
     *
     * @param $pathToLanguageFile
     * @deprecated use setLanguageFile() instead
     */
    public function setPathToLanguageFile($pathToLanguageFile)
    {
        Tx_Smarty_Service_Compatibility::logDeprecatedFunction();
        $this->setLanguageFile($pathToLanguageFile);
    }

    /**
     * Get the language file(s)
     *
     * @return array|null
     * @deprecated use getLanguageFile() instead
     */
    public function getPathToLanguageFile()
    {
        Tx_Smarty_Service_Compatibility::logDeprecatedFunction();
        return $this->getLanguageFile();
    }

    /**
     * Set smarty configuration variable
     *
     * @param $property
     * @param $value
     * @deprecated use setter/getter instead. For example set('cache_lifetime', 3600)
     */
    public function setSmartyVar($property, $value)
    {
        Tx_Smarty_Service_Compatibility::logDeprecatedFunction();
        $this->set($property, $value);
    }
}
